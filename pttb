#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import logging
from config import Config
from incident import Incident
import time
import subprocess
import select
import os
import re

try:
    import argparse
except ImportError:
    print("ERROR: install argparse manually: sudo pip install argparse")
    sys.exit(2)

try:
    from telegram import Update
    from telegram import ParseMode
    from telegram.ext import Updater
    from telegram.ext import CallbackContext
    from telegram.ext import CommandHandler
except ImportError:
    print("ERROR: install ptb manually: sudo pip install python-telegram-bot --upgrade")
    sys.exit(2)

global stats
stats = { 'starttime': 0, 'loglines_read': 0, 'incidents_created': 0, 'incidents_silenced': 0, 'incidents_sent': 0 }

def setup_logger(debug=False):
    if debug:
        level = logging.DEBUG
    else:
        level = logging.INFO
    logger = logging.getLogger('pttb')
    logger.setLevel(level)
    formatter = logging.Formatter('[%(levelname)-8s] %(name)17s - %(funcName)-15s: %(message)s')
    ch = logging.StreamHandler()
    ch.setLevel(level)
    ch.setFormatter(formatter)
    logger.addHandler(ch)
    return logger


def bot_cmd_start(update: Update, context: CallbackContext):
    context.bot.send_message(chat_id=update.effective_chat.id, text="I'm a bot, please talk to me!")


def setup_bot(logger, cfg):
    logging.basicConfig(format='[%(levelname)-8s] %(name)17s - %(funcName)-15s: %(message)s', level=logging.INFO)
    bot = Updater(token=cfg.token_get())
    bot.dispatcher.add_handler(CommandHandler('start', bot_cmd_start))
    bot.start_polling()
    return bot


def main_tail(logger, args, cfg, bot):
    global stats
    if not os.path.exists(args.file):
        logger.warning("file %s currently does not exist" % args.file)

    f = subprocess.Popen(['tail', '-F', '-n', '0', args.file], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    p = select.poll()
    p.register(f.stdout)

    incidents = {}
    stats['starttime'] = time.time()
    while True:
        if p.poll(1.0):
            line = f.stdout.readline().decode('utf-8').strip()
            stats['loglines_read'] += 1
            logger.debug("line: %s" % line)

            for t in cfg.trigger_list():
                if re.search(t['regexp'], line):
                    logger.debug("trigger '%s' matched line '%s'" % (t['regexp'], line))
                    if not t['regexp'] in incidents:
                        i = Incident(t['regexp'], t['duration'], t['message'])
                        logger.info("incident #%d created for trigger '%s'" % (i.getid(), t['regexp']))
                        incidents[t['regexp']] = i
                        stats['incidents_created'] += 1
                    incidents[t['regexp']].feedlog(line)
        else:
            time.sleep(0.25)

        for k in list(incidents):
            if incidents[k].expired():
                i = incidents[k].getid()
                msg = incidents[k].render()
                logger.debug("incident #%d expired, message '%s'" % (i, repr(msg)))

                silence = False
                for s in cfg.silence_list():
                    if re.search(s['regexp'], msg):
                        logger.debug("silence '%s' matched message for incident #%d" % (s['regexp'], i))
                        silence = True
                if silence:
                    logger.warning("silencing notification for incident #%d" % i)
                    stats['incidents_silenced'] += 1
                else:
                    logger.info("sending notification for incident #%d" % i)
                    bot.dispatcher.bot.send_message(chat_id=cfg.chatid_get(), text=msg, parse_mode=ParseMode.HTML)
                    stats['incidents_sent'] += 1

                del incidents[k]
    return

def main():
    parser = argparse.ArgumentParser(formatter_class=argparse.RawTextHelpFormatter)
    parser.add_argument('-v', dest='verbose', action='store_true', help="""Enable verbosity, default False""")
    parser.add_argument('-d', dest='debug', action='store_true', help="""Enable debug, default False""")
    parser.add_argument('-c', '--config', dest='config', default="/etc/pttb/pttb.yaml", type=str, 
            help="""Location of the YAML config file, default /etc/pttb/pttb.yaml""")
    parser.add_argument('--file', "-f", dest='file', required=True, type=str, help="""Logfile to perform tail on""")

    args = parser.parse_args()
    logger = setup_logger(debug=args.debug)
    if args.debug:
        logger.debug("Arguments: %s" % args)

    cfg = Config(config=args.config)
    if not cfg.read():
        logger.error("Aborting")
        sys.exit(3)

    bot = setup_bot(logger, cfg)

    main_tail(logger, args, cfg, bot)

    logger.info("Exiting successfully. A job well done!")
    sys.exit(0)

if __name__ == "__main__":
    main()

